{"version":3,"sources":["styled.js","Header/index.js","shared/config.js","shared/utilites.js","Container/Navigation/index.js","Container/Cards/SingleCardContainer/Modal/index.js","Container/Cards/SingleCardContainer/SingleCard/index.js","Container/container.service.js","Container/Cards/SingleCardContainer/index.js","Container/Cards/Pagination/index.js","Container/Cards/index.js","Container/index.js","Footer/index.js","App.js","index.js"],"names":["StyledBadge","styled","Badge","type","StyledJumbotron","Jumbotron","StyledDropdown","Dropdown","SingleCardWrapper","Container","StyledRow","centerContent","Row","PokemonImage","img","PaginationList","ul","Header","apiUrl","pokemonsListUrl","pokemonTypesUrl","pokemonDefaultImage","capitalizeFirstLetter","string","toUpperCase","substr","Navigation","activePokemonType","changeType","pokemonTypes","alignRight","Toggle","variant","Menu","Item","onClick","map","singleType","key","name","url","PokemonModal","pokemonData","show","handleClose","sprites","types","stats","abilities","Modal","onHide","className","closeButton","Title","Body","src","front_default","alt","stat","Col","xs","ProgressBar","animated","max","label","base_stat","now","reverse","ability","Alert","Footer","Button","SingleCard","getData","a","fetch","fetchedData","response","json","SingleCardContainer","pokemon","useState","setPokemonData","setShow","useEffect","res","fetchPosts","Spinner","animation","Pagination","pokemonsPerPage","totalPokemons","paginate","totalPageNumbers","Math","ceil","pageNumbers","Array","keys","pageNumber","number","style","margin","Cards","endpoint","currentPage","setCurrentPage","pokemonsData","setPokemonsData","results","getPokemonsData","indexOfLastPokemon","indexOfFirstPokemon","currentPokemons","slice","length","sm","md","lg","id","setPokemonTypes","setActivePokemonType","setEndpoint","then","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.47adf1e2.chunk.js","sourcesContent":["import {\r\n  Badge, Jumbotron, Dropdown, Container, Row,\r\n} from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\n\r\nexport const StyledBadge = styled(Badge)`\r\n  background-color: ${({ type }) => {\r\n    switch (type) {\r\n      case 'fire':\r\n        return 'red';\r\n      case 'water':\r\n        return 'blue';\r\n      case 'grass':\r\n        return 'green';\r\n      case 'poison':\r\n        return 'purple';\r\n      case 'flying':\r\n        return 'skyblue';\r\n      case 'bug':\r\n        return 'darkgreen';\r\n      case 'normal':\r\n        return 'sandybrown';\r\n      case 'fairy':\r\n        return 'pink';\r\n      case 'electric':\r\n        return 'rgb(228, 228, 3)';\r\n      case 'fighting':\r\n        return 'rgb(141, 0, 0)';\r\n      case 'ground':\r\n        return 'saddlebrown';\r\n      case 'rock':\r\n        return 'rosybrown';\r\n      case 'ghost':\r\n        return 'midnightblue';\r\n      case 'steel':\r\n        return 'silver';\r\n      case 'psychic':\r\n        return 'violet';\r\n      case 'ice':\r\n        return 'rgb(209, 209, 209)';\r\n      case 'dragon':\r\n        return 'orange';\r\n      case 'dark':\r\n        return 'black';\r\n      default:\r\n        return 'grey';\r\n    }\r\n  }};\r\n  color: white;\r\n  margin: 5px;\r\n  padding: 8px;\r\n  letter-spacing: 2px;\r\n`;\r\n\r\nexport const StyledJumbotron = styled(Jumbotron)`\r\n  color: white;\r\n  background-color: rgb(233, 83, 83);\r\n  border-radius: 0;\r\n  margin-bottom: 0;\r\n`;\r\n\r\nexport const StyledDropdown = styled(Dropdown)`\r\n  margin: 1rem;\r\n`;\r\n\r\nexport const SingleCardWrapper = styled(Container)`\r\n  cursor: pointer;\r\n  box-shadow: 0px 0px 15px -5px grey;\r\n  border-radius: 6px;\r\n  height: 12rem;\r\n  padding: 1rem;\r\n  margin: 1rem auto;\r\n  width: 12rem;\r\n`;\r\n\r\nexport const StyledRow = {\r\n  centerContent: styled(Row)`\r\n    justify-content: center;\r\n    align-items: center;\r\n  `,\r\n};\r\n\r\nexport const PokemonImage = styled.img`\r\n  max-height: 96px;\r\n  max-width: 96px;\r\n`;\r\n\r\nexport const PaginationList = styled.ul`\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n`;\r\n","import React from 'react';\nimport { StyledJumbotron } from '../styled';\n\nconst Header = () => (\n  <StyledJumbotron>\n    <h1>Welcome in pokedex</h1>\n    <p>\n      Check all pokemon types in the world!\n    </p>\n    <p>\n      Gotta Catch &apos;Em All\n    </p>\n  </StyledJumbotron>\n);\n\nexport default Header;\n","const apiUrl = 'https://pokeapi.co/api/v2';\n\nexport const pokemonsListUrl = `${apiUrl}/pokemon?offset=0&limit=1000`;\nexport const pokemonTypesUrl = `${apiUrl}/type`;\nexport const pokemonDefaultImage = 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/0.png';\n","const capitalizeFirstLetter = (string) => string[0].toUpperCase() + string.substr(1);\n\nexport default capitalizeFirstLetter;\n","import React from 'react';\nimport { Dropdown, Container } from 'react-bootstrap';\nimport { StyledDropdown, StyledRow } from '../../styled';\n\nimport { pokemonsListUrl } from '../../shared/config';\nimport capitalizeFirstLetter from '../../shared/utilites';\n\nconst Navigation = ({\n  activePokemonType, changeType, pokemonTypes,\n}) => (\n  <Container>\n    <StyledRow.centerContent>\n      Filter pokemons by type:\n      <StyledDropdown alignRight>\n        <Dropdown.Toggle variant=\"outline-danger\">\n          { capitalizeFirstLetter(activePokemonType) }\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n          <Dropdown.Item onClick={() => changeType('All types', pokemonsListUrl)}>\n            All types\n          </Dropdown.Item>\n          {pokemonTypes.map((singleType) => (\n            <Dropdown.Item\n              key={singleType.name}\n              onClick={() => changeType(singleType.name, singleType.url)}\n            >\n              { capitalizeFirstLetter(singleType.name) }\n            </Dropdown.Item>\n          ))}\n        </Dropdown.Menu>\n      </StyledDropdown>\n    </StyledRow.centerContent>\n  </Container>\n);\n\nexport default Navigation;\n","import React from 'react';\nimport {\n  Modal, Button, ProgressBar, Alert, Col, Row,\n} from 'react-bootstrap';\n\nimport { StyledBadge } from '../../../../styled';\nimport { pokemonDefaultImage } from '../../../../shared/config';\nimport capitalizeFirstLetter from '../../../../shared/utilites';\n\n\nconst PokemonModal = ({ pokemonData, show, handleClose }) => {\n  const {\n    sprites, name, types, stats, abilities,\n  } = pokemonData;\n\n  return (\n    <Modal show={show} onHide={handleClose} className=\"form-group text-center\">\n      <Modal.Header closeButton>\n        <Modal.Title>\n          {capitalizeFirstLetter(name)}\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <img\n          src={sprites.front_default || pokemonDefaultImage}\n          alt={name}\n        />\n        <hr />\n        {types.map((singleType) => (\n          <StyledBadge type={singleType.type.name} key={singleType.type.name}>\n            {singleType.type.name}\n          </StyledBadge>\n        ))}\n        <hr />\n        {stats.map((stat) => (\n          <Row key={stat.stat.name}>\n            <Col xs={4}>\n              {stat.stat.name}\n            </Col>\n            <Col xs={8}>\n              <ProgressBar\n                animated\n                variant=\"success\"\n                max=\"150\"\n                label={stat.base_stat}\n                now={stat.base_stat}\n              />\n            </Col>\n          </Row>\n        )).reverse()}\n        <hr />\n        {abilities.map((ability) => (\n          <Alert variant=\"info\" key={ability.ability.name}>\n            <b>{ability.ability.name}</b>\n          </Alert>\n        ))}\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"outline-danger\" onClick={handleClose}>\n          Close\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default PokemonModal;\n","import React from 'react';\n\nimport { pokemonDefaultImage } from '../../../../shared/config';\nimport { StyledBadge, StyledRow, PokemonImage } from '../../../../styled';\nimport capitalizeFirstLetter from '../../../../shared/utilites';\n\nconst SingleCard = ({ pokemonData }) => {\n  const { name, sprites, types } = pokemonData;\n\n  return (\n    <>\n      <StyledRow.centerContent>\n        {capitalizeFirstLetter(name)}\n      </StyledRow.centerContent>\n      <StyledRow.centerContent>\n        <PokemonImage variant=\"top\" src={sprites.front_default || pokemonDefaultImage} alt={name} />\n      </StyledRow.centerContent>\n      <StyledRow.centerContent>\n        {types.map((singleType) => (\n          <StyledBadge type={singleType.type.name} key={singleType.type.name}>\n            {singleType.type.name}\n          </StyledBadge>\n        ))}\n      </StyledRow.centerContent>\n    </>\n  );\n};\nexport default SingleCard;\n","const getData = async (url) => {\n  const fetchedData = await fetch(url);\n  const response = fetchedData.json();\n  return response;\n};\n\nexport default getData;\n","import React, { useState, useEffect } from 'react';\nimport { Spinner } from 'react-bootstrap';\n\nimport PokemonModal from './Modal';\nimport SingleCard from './SingleCard';\nimport getData from '../../container.service';\nimport { SingleCardWrapper } from '../../../styled';\n\n\nconst SingleCardContainer = ({ pokemon }) => {\n  const [pokemonData, setPokemonData] = useState(null);\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      const res = await getData(pokemon.url);\n      setPokemonData(res);\n    };\n\n    fetchPosts();\n  }, [pokemon]);\n\n  return (\n    pokemonData\n      ? (\n        <>\n          <SingleCardWrapper onClick={handleShow}>\n            <SingleCard pokemonData={pokemonData} />\n          </SingleCardWrapper>\n          <PokemonModal\n            show={show}\n            pokemonData={pokemonData}\n            handleClose={handleClose}\n          />\n        </>\n      ) : <Spinner animation=\"border\" variant=\"danger\" />\n  );\n};\n\nexport default SingleCardContainer;\n","import React from 'react';\r\nimport {\r\n  Container, Row, Col, Button,\r\n} from 'react-bootstrap';\r\n\r\nimport { PaginationList } from '../../../styled';\r\n\r\nconst Pagination = ({ pokemonsPerPage, totalPokemons, paginate }) => {\r\n  const totalPageNumbers = Math.ceil(totalPokemons / pokemonsPerPage);\r\n  const pageNumbers = [...Array(totalPageNumbers).keys()].map((pageNumber) => pageNumber + 1);\r\n  const getButtons = () => (pageNumbers.map((number) => (\r\n    <li key={number}>\r\n      <Button\r\n        variant=\"outline-danger\"\r\n        onClick={() => paginate(number)}\r\n        style={{ margin: 5 }}\r\n      >\r\n        {number}\r\n      </Button>\r\n    </li>\r\n  )));\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col>\r\n          <PaginationList className=\"pagination\">\r\n            {getButtons()}\r\n          </PaginationList>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React, { useEffect, useState } from 'react';\nimport {\n  Container, Col,\n} from 'react-bootstrap';\n\nimport SingleCardContainer from './SingleCardContainer';\nimport Pagination from './Pagination';\nimport getData from '../container.service';\nimport { StyledRow } from '../../styled';\n\n\nconst Cards = ({ endpoint, currentPage, setCurrentPage }) => {\n  const [pokemonsData, setPokemonsData] = useState([]);\n  const [pokemonsPerPage] = useState(24);\n\n  useEffect(() => {\n    const getPokemonsData = async () => {\n      const res = await getData(endpoint);\n      setPokemonsData(res.pokemon || res.results);\n    };\n    getPokemonsData();\n  }, [endpoint]);\n\n  const indexOfLastPokemon = currentPage * pokemonsPerPage;\n  const indexOfFirstPokemon = indexOfLastPokemon - pokemonsPerPage;\n  const currentPokemons = pokemonsData.slice(indexOfFirstPokemon, indexOfLastPokemon);\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\n\n  return (\n    pokemonsData.length\n      ? (\n        <>\n          <Container>\n            <StyledRow.centerContent>\n              {currentPokemons && currentPokemons.map((pokemon) => (\n                <Col xs={8} sm={6} md={4} lg={3} key={pokemon.id}>\n                  <SingleCardContainer\n                    pokemon={pokemon.pokemon || pokemon}\n                  />\n                </Col>\n              ))}\n            </StyledRow.centerContent>\n          </Container>\n          <Pagination\n            pokemonsPerPage={pokemonsPerPage}\n            totalPokemons={pokemonsData.length}\n            paginate={paginate}\n          />\n        </>\n      )\n      : null\n  );\n};\n\nexport default Cards;\n","import React, { useEffect, useState } from 'react';\n\nimport Navigation from './Navigation';\nimport Cards from './Cards';\nimport getData from './container.service';\nimport { pokemonTypesUrl, pokemonsListUrl } from '../shared/config';\n\nconst Container = () => {\n  const [pokemonTypes, setPokemonTypes] = useState([]);\n  const [activePokemonType, setActivePokemonType] = useState('All types');\n  const [endpoint, setEndpoint] = useState(pokemonsListUrl);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  useEffect(() => {\n    getData(pokemonTypesUrl).then((res) => setPokemonTypes(res.results));\n  }, []);\n\n  const changeType = (name, url) => ((\n    setActivePokemonType(name),\n    setEndpoint(url),\n    setCurrentPage(1)\n  ));\n\n  return (\n    <>\n      <hr />\n      <Navigation\n        changeType={changeType}\n        activePokemonType={activePokemonType}\n        pokemonTypes={pokemonTypes}\n      />\n      <hr />\n      <Cards\n        endpoint={endpoint}\n        currentPage={currentPage}\n        setCurrentPage={setCurrentPage}\n      />\n    </>\n  );\n};\n\nexport default Container;\n","import React from 'react';\nimport { StyledJumbotron } from '../styled';\n\nconst Footer = () => (\n  <StyledJumbotron>\n    <hr />\n    <p>\n      <b>Made for all pokemon trainers in the world</b>\n    </p>\n    <hr />\n    <p>\n      Łukasz Wiśniewski\n    </p>\n  </StyledJumbotron>\n);\n\nexport default Footer;\n","import React from 'react';\n\nimport './App.scss';\nimport Header from './Header';\nimport Container from './Container';\nimport Footer from './Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Container />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}